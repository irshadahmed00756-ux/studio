/**
 * @fileoverview Firestore Security Rules for Aesthetic Nasra.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * (profiles, shopping carts, orders). It allows public read access to product
 * catalogs while restricting write access. Live chat sessions are secured based
 * on user association.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, secured via ownership (`userId == request.auth.uid`).
 * - /product_categories/{productCategoryId}: Public product categories.
 * - /products/{productId}: Public product information.
 * - /users/{userId}/shopping_cart: User-specific shopping cart.
 * - /users/{userId}/shopping_cart/cart_items/{cartItemId}: Items in a user's cart.
 * - /users/{userId}/orders/{orderId}: User's order history.
 * - /users/{userId}/orders/{orderId}/order_items/{orderItemId}: Items within an order.
 * - /vendors/{vendorId}: Vendor information.
 * - /live_chat_sessions/{sessionId}: Live chat sessions, secured via user association.
 * - /live_chat_sessions/{sessionId}/chat_messages/{messageId}: Messages in a chat session.
 *
 * Key Security Decisions:
 * - Users can only access their own profiles, shopping carts, and orders.
 * - Product categories and products are publicly readable.
 * - Listing of users is disallowed.
 * - Default security posture is strict: deny all access unless explicitly allowed.
 *
 * Denormalization for Authorization:
 *   The `userId` is used to enforce ownership for resources under the `/users/{userId}` path.
 *   For example, the ShoppingCart document's `userId` field should match the `userId` in the path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles, ensuring users can only access their own data.
     * @path /users/{userId}
     * @allow (create) User with matching `userId` can create their profile.
     * @allow (get, update, delete) Authenticated user with matching `userId` can access their profile.
     * @deny (create) User trying to create a profile with a `userId` that doesn't match their `auth.uid`.
     * @deny (get, update, delete) Authenticated user trying to access another user's profile.
     * @deny (list) Listing users is not allowed.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isExistingOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to product categories.
     * @path /product_categories/{productCategoryId}
     * @allow (get, list) Any user can read product categories.
     * @deny (create, update, delete) No user can modify product categories.
     * @principle Allows public read access with restricted writes.
     */
    match /product_categories/{productCategoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to product information.
     * @path /products/{productId}
     * @allow (get, list) Any user can read product information.
     * @deny (create, update, delete) No user can modify product information.
     * @principle Allows public read access with restricted writes.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secures user-specific shopping carts.
     * @path /users/{userId}/shopping_cart
     * @allow (create, get, update, delete) Authenticated user with matching `userId` can manage their shopping cart.
     * @deny (create, get, update, delete) Authenticated user trying to access another user's shopping cart.
     * @deny (list) Listing shopping carts is not allowed.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/shopping_cart {
        function isOwner(userId) {
          return request.auth != null && request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }
        allow get: if isExistingOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId) && request.resource.data.userId == userId;
        allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures individual items within a user's shopping cart.
     * @path /users/{userId}/shopping_cart/cart_items/{cartItemId}
     * @allow (create, get, update, delete) Authenticated user with matching `userId` can manage their cart items.
     * @deny (create, get, update, delete) Authenticated user trying to access another user's cart items.
     * @deny (list) Listing cart items is allowed only to owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/shopping_cart/cart_items/{cartItemId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

        allow get: if isExistingOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures user's order history.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create, get, update, delete) Authenticated user with matching `userId` can manage their order history.
     * @deny (create, get, update, delete) Authenticated user trying to access another user's order history.
     * @deny (list) Listing orders is only allowed to owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/orders/{orderId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

        allow get: if isExistingOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId) && request.resource.data.userId == userId;
        allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures individual items within a user's order.
     * @path /users/{userId}/orders/{orderId}/order_items/{orderItemId}
     * @allow (create, get, update, delete) Authenticated user with matching `userId` can manage their order items.
     * @deny (create, get, update, delete) Authenticated user trying to access another user's order items.
     * @deny (list) Listing order items is allowed only to owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/orders/{orderId}/order_items/{orderItemId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

        allow get: if isExistingOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Stores vendor information.
     * @path /vendors/{vendorId}
     * @allow (get, list) Any user can read vendor information.
     * @deny (create, update, delete) No user can modify vendor information.
     * @principle Allows public read access with restricted writes.
     */
    match /vendors/{vendorId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Stores live chat session information. The `userId` field indicates the user involved in the session.
     * @path /live_chat_sessions/{sessionId}
     * @allow (get) Any user can read.
     * @allow (create) Authenticated user can create a chat session
     * @deny (update, delete) No user can modify a chat session.
     * @principle Allows public read access with restricted writes.
     */
    match /live_chat_sessions/{sessionId} {
        allow get, list: if true;
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
        allow update, delete: if false;
    }

    /**
     * @description Stores individual chat messages within a live chat session.
     * @path /live_chat_sessions/{sessionId}/chat_messages/{messageId}
     * @allow (create, get, list) Any user can manage chat messages.
     * @deny (update, delete) No user can modify vendor information.
     * @principle Allows public read access with restricted writes.
     */
    match /live_chat_sessions/{sessionId}/chat_messages/{messageId} {
      allow get, list, create: if true;
      allow update, delete: if false;
    }
  }
}